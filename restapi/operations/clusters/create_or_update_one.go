// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateOneHandlerFunc turns a function with the right signature into a create or update one handler
type CreateOrUpdateOneHandlerFunc func(CreateOrUpdateOneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateOneHandlerFunc) Handle(params CreateOrUpdateOneParams) middleware.Responder {
	return fn(params)
}

// CreateOrUpdateOneHandler interface for that can handle valid create or update one params
type CreateOrUpdateOneHandler interface {
	Handle(CreateOrUpdateOneParams) middleware.Responder
}

// NewCreateOrUpdateOne creates a new http.Handler for the create or update one operation
func NewCreateOrUpdateOne(ctx *middleware.Context, handler CreateOrUpdateOneHandler) *CreateOrUpdateOne {
	return &CreateOrUpdateOne{Context: ctx, Handler: handler}
}

/*CreateOrUpdateOne swagger:route PUT /clusters/{name} clusters createOrUpdateOne

CreateOrUpdateOne create or update one API

*/
type CreateOrUpdateOne struct {
	Context *middleware.Context
	Handler CreateOrUpdateOneHandler
}

func (o *CreateOrUpdateOne) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateOrUpdateOneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
